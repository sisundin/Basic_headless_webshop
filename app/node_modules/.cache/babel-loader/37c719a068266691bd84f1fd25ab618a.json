{"ast":null,"code":"var _jsxFileName = \"/Users/simonsundin/Documents/GitHub/projekt_gr-n/app/src/ordering_components/KlarnaCheckout.jsx\";\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport KlarnaButton from \"./prebuilt/KlarnaButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nexport default function KlarnaCheckout() {\n  const source = async () => {\n    window.fetch(\"http://localhost:4242/create-klarna-payment-intent\", {\n      method: \"POST\"\n    }).then(res => {\n      console.log(res);\n      return res.json();\n    });\n  };\n\n  const Klarna = async () => {\n    Klarna.Payments.init({\n      client_token: await source.klarna.client_token\n    });\n  };\n\n  console.log(\"hej\");\n  console.log(Klarna.client_token);\n\n  window.klarnaAsyncCallback = function () {\n    // Initialize the SDK\n    // Load the widget for each payment method category:\n    // - pay_later\n    // - pay_over_time\n    // - pay_now\n    var available_categories = source.klarna.payment_method_category.split(',');\n\n    for (var category of available_categories) {\n      Klarna.Payments.load({\n        container: \"#klarna_\" + category + \"_container\",\n        payment_method_category: category\n      }, function (res) {\n        if (res.show_form) {\n          /*\n          * this payment method category can be used, allow the customer\n          * to choose it in your interface.\n          */\n        } else {// this payment method category is not available\n          }\n      });\n    }\n  };\n\n  const handleClick = () => {\n    // get the category the customer chose(using your own code)\n    //var selectedCategory = getSelectedCategory();\n    // Submit the payment for authorization with the selected category\n    console.log(Klarna.Payments);\n    Klarna.Payments.authorize({\n      payment_method_category: 'pay now'\n    }, function (res) {\n      if (res.approved) {// Payment has been authorized\n      } else {\n        if (res.error) {// Payment not authorized or an error has occurred\n        } else {// handle other states\n          }\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(KlarnaButton, {\n    id: \"paybutton\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Pay\"));\n}\n;","map":{"version":3,"sources":["/Users/simonsundin/Documents/GitHub/projekt_gr-n/app/src/ordering_components/KlarnaCheckout.jsx"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","styled","Row","BillingDetailsFields","SubmitButton","KlarnaButton","CheckoutError","KlarnaCheckout","source","window","fetch","method","then","res","console","log","json","Klarna","Payments","init","client_token","klarna","klarnaAsyncCallback","available_categories","payment_method_category","split","category","load","container","show_form","handleClick","authorize","approved","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EAEEC,SAFF,QAEmB,OAFnB;AAGA,SACEC,WADF,EAEEC,SAFF,EAGEC,WAHF,QAGqB,yBAHrB;AAIA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA,OAAOC,aAAP,MAA0B,0BAA1B;AAKA,eAAe,SAASC,cAAT,GAA0B;AAEvC,QAAMC,MAAM,GAAG,YAAY;AACzBC,IAAAA,MAAM,CAACC,KAAP,CAAa,oDAAb,EAAmE;AACnEC,MAAAA,MAAM,EAAE;AAD2D,KAAnE,EAGDC,IAHC,CAGIC,GAAG,IAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOA,GAAG,CAACG,IAAJ,EAAP;AACD,KANC;AAMC,GAPH;;AASA,QAAMC,MAAM,GAAG,YAAY;AAAEA,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqB;AAChDC,MAAAA,YAAY,EAAE,MAAMZ,MAAM,CAACa,MAAP,CAAcD;AADc,KAArB;AAE1B,GAFH;;AAIAN,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACG,YAAnB;;AAKEX,EAAAA,MAAM,CAACa,mBAAP,GAA6B,YAAY;AAIrC;AAGA;AACA;AACA;AACA;AACA,QAAIC,oBAAoB,GAAGf,MAAM,CAACa,MAAP,CAAcG,uBAAd,CAAsCC,KAAtC,CAA4C,GAA5C,CAA3B;;AACA,SAAK,IAAIC,QAAT,IAAqBH,oBAArB,EAA2C;AACzCN,MAAAA,MAAM,CAACC,QAAP,CAAgBS,IAAhB,CAAqB;AACnBC,QAAAA,SAAS,EAAE,aAAaF,QAAb,GAAwB,YADhB;AAEnBF,QAAAA,uBAAuB,EAAEE;AAFN,OAArB,EAGG,UAASb,GAAT,EAAc;AACf,YAAIA,GAAG,CAACgB,SAAR,EAAmB;AACjB;;;;AAID,SALD,MAKO,CACL;AACD;AACF,OAZD;AAaD;AACF,GA3BH;;AA8BA,QAAMC,WAAW,GAAG,MAAM;AACtB;AACA;AACA;AAEAhB,IAAAA,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACC,QAAnB;AACAD,IAAAA,MAAM,CAACC,QAAP,CAAgBa,SAAhB,CAA0B;AACxBP,MAAAA,uBAAuB,EAAE;AADD,KAA1B,EAEG,UAASX,GAAT,EAAc;AACf,UAAIA,GAAG,CAACmB,QAAR,EAAkB,CAChB;AACD,OAFD,MAEO;AACL,YAAInB,GAAG,CAACoB,KAAR,EAAe,CACb;AACD,SAFD,MAEO,CACL;AACD;AACF;AACF,KAZD;AAaD,GAnBH;;AAuBF,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,EAAE,EAAE,WAAlB;AAA+B,IAAA,OAAO,EAAEH,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADJ;AAOD;AAAA","sourcesContent":["import React from 'react';\nimport { \n  useState, \n  useEffect } from \"react\";\nimport { \n  CardElement, \n  useStripe, \n  useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport KlarnaButton from \"./prebuilt/KlarnaButton\";\n\nimport CheckoutError from \"./prebuilt/CheckoutError\";\n\n\n\n\nexport default function KlarnaCheckout() {\n\n  const source = async () => { \n    window.fetch(\"http://localhost:4242/create-klarna-payment-intent\", {\n    method: \"POST\",\n  })\n  .then(res => {\n    console.log(res)\n    return res.json();\n  })}\n  \n  const Klarna = async () => { Klarna.Payments.init({\n    client_token: await source.klarna.client_token,\n  })};\n  \n  console.log(\"hej\")\n  console.log(Klarna.client_token)\n  \n\n\n\n    window.klarnaAsyncCallback = function () {\n\n\n\n        // Initialize the SDK\n\n      \n        // Load the widget for each payment method category:\n        // - pay_later\n        // - pay_over_time\n        // - pay_now\n        var available_categories = source.klarna.payment_method_category.split(',');\n        for (var category of available_categories) {\n          Klarna.Payments.load({\n            container: \"#klarna_\" + category + \"_container\",\n            payment_method_category: category,\n          }, function(res) {\n            if (res.show_form) {\n              /*\n              * this payment method category can be used, allow the customer\n              * to choose it in your interface.\n              */\n            } else {\n              // this payment method category is not available\n            }\n          });\n        }\n      };\n\n\n    const handleClick = () => {\n        // get the category the customer chose(using your own code)\n        //var selectedCategory = getSelectedCategory();\n        // Submit the payment for authorization with the selected category\n\n        console.log(Klarna.Payments)\n        Klarna.Payments.authorize({\n          payment_method_category: 'pay now'\n        }, function(res) {\n          if (res.approved) {\n            // Payment has been authorized\n          } else {\n            if (res.error) {\n              // Payment not authorized or an error has occurred\n            } else {\n              // handle other states\n            }\n          }\n        })\n      };\n\n    \n \n  return (\n      <div>\n        <KlarnaButton id={\"paybutton\"} onClick={handleClick}> \n            Pay \n        </KlarnaButton>\n      </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}