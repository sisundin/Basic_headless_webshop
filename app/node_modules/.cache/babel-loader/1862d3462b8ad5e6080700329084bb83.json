{"ast":null,"code":"var _jsxFileName = \"/Users/simonsundin/Documents/GitHub/projekt_gr-n/src/ordering_components/CheckoutForm.jsx\";\nimport React from 'react';\nimport { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport axios from \"axios\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nimport Pay from \"./api/payment_intents\";\nconst CardElementContainer = styled.div`\n  height: 35px;\n  display: flex;\n  align-items: center;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({\n  price,\n  onSuccessfulCheckout\n}) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  const stripe = useStripe();\n  const elements = useElements(); // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = ev => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault();\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        postal_code: ev.target.zip.value\n      },\n      phone: ev.target.phone.value\n    };\n    setProcessingTo(true);\n    const cardElement = elements.getElement(\"card\");\n    console.log(cardElement);\n\n    try {\n      debugger;\n      const {\n        data: clientSecret\n      } = await new Pay();\n      console.log(clientSecret);\n      console.log(\"AXIS Function succeed\");\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: cardElement,\n        billing_details: billingDetails\n      });\n\n      if (paymentMethodReq.error) {\n        console.log(\"hej3\");\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      const {\n        error\n      } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id\n      });\n\n      if (error) {\n        setCheckoutError(error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      onSuccessfulCheckout();\n    } catch (err) {\n      console.log(err);\n      setCheckoutError(err.message);\n    }\n  }; // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n\n  const iframeStyles = {\n    base: {\n      fontSize: \"20px\",\n      iconColor: \"black\",\n      \"::placeholder\": {\n        color: \"#87bbfd\"\n      }\n    },\n    invalid: {\n      iconColor: \"#FFC7EE\",\n      color: \"#FFC7EE\"\n    },\n    complete: {\n      iconColor: \"#cbf4c9\"\n    }\n  };\n  const cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BillingDetailsFields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardElementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    options: cardElementOpts,\n    onChange: handleCardDetailsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }))), checkoutError && /*#__PURE__*/React.createElement(CheckoutError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  }, checkoutError), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SubmitButton, {\n    disabled: isProcessing || !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, isProcessing ? \"Processing...\" : `Pay $ ${price}`)));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/simonsundin/Documents/GitHub/projekt_gr-n/src/ordering_components/CheckoutForm.jsx"],"names":["React","useState","CardElement","useStripe","useElements","styled","axios","Row","BillingDetailsFields","SubmitButton","CheckoutError","Pay","CardElementContainer","div","CheckoutForm","price","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleCardDetailsChange","ev","error","message","handleFormSubmit","preventDefault","billingDetails","name","target","value","email","address","city","line1","postal_code","zip","phone","cardElement","getElement","console","log","data","clientSecret","paymentMethodReq","createPaymentMethod","type","card","billing_details","confirmCardPayment","payment_method","paymentMethod","id","err","iframeStyles","base","fontSize","iconColor","color","invalid","complete","cardElementOpts","iconStyle","style","hidePostalCode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from \"react\";\nimport { \n  CardElement, \n  useStripe, \n  useElements \n} from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport axios from \"axios\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nimport Pay from \"./api/payment_intents\";\n\nconst CardElementContainer = styled.div`\n  height: 35px;\n  display: flex;\n  align-items: center;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({ price, onSuccessfulCheckout }) => {\n\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = ev => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        postal_code: ev.target.zip.value\n      },\n      phone: ev.target.phone.value\n    };\n\n    setProcessingTo(true);\n\n    const cardElement = elements.getElement(\"card\");\n\n    console.log(cardElement)\n\n    try {\n      debugger;\n      const { data: clientSecret } = await new Pay();\n\n      console.log(clientSecret)\n      console.log(\"AXIS Function succeed\")\n\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: cardElement,\n        billing_details: billingDetails\n      });\n\n      if (paymentMethodReq.error) {\n        console.log(\"hej3\")\n\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      const { error } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id\n      });\n\n      if (error) {\n       \n        setCheckoutError(error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      onSuccessfulCheckout();\n    } catch (err) {\n      console.log(err)\n      setCheckoutError(err.message);\n    }\n  };\n\n  // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n  const iframeStyles = {\n    base: {\n      fontSize: \"20px\",\n      iconColor: \"black\",\n      \"::placeholder\": {\n        color: \"#87bbfd\"\n      }\n    },\n    invalid: {\n      iconColor: \"#FFC7EE\",\n      color: \"#FFC7EE\"\n    },\n    complete: {\n      iconColor: \"#cbf4c9\"\n    }\n  };\n\n  const cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <Row>\n        <BillingDetailsFields />\n      </Row>\n      <Row>\n\n        <CardElementContainer>\n          <CardElement\n            options={cardElementOpts}\n            onChange={handleCardDetailsChange}\n          />\n        </CardElementContainer>\n      </Row>\n      {checkoutError && <CheckoutError>{checkoutError}</CheckoutError>}\n      <Row>\n        {/* TIP always disable your submit button while processing payments */}\n        <SubmitButton disabled={isProcessing || !stripe}>\n          {isProcessing ? \"Processing...\" : `Pay $ ${price}` }\n         </SubmitButton>\n\n      </Row>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}