{"ast":null,"code":"var _jsxFileName = \"/Users/simonsundin/Documents/GitHub/projekt_gr-n/app/src/site_pages/checkOut.js\";\nimport '../butterclient';\nimport React from 'react';\nimport CheckoutForm from '../ordering_components/CheckoutForm.jsx';\nimport BasketDetails from '../ordering_components/BasketDetails.js';\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport history from '../history';\nimport KlarnaButton from \"../ordering_components/prebuilt/KlarnaButton.jsx\";\nimport { Helmet } from \"react-helmet\";\nimport Klarna from \"klarna-checkout\"; //************************TO DO ___ LATER ****************************/\n// Learning\n// To best leverage Stripe’s advanced fraud functionality,\n// include this script on every page, not just the checkout page.\n// This allows Stripe to detect anomalous behavior that may be indicative\n// of fraud as customers browse your website.\n// Note: This is why we are adding it to a Layout component.\n\nconst stripePromise = loadStripe(process.env.REACT_APP_PUBLISHABLE_KEY);\nconst stripe = loadStripe(process.env.REACT_APP_PUBLISHABLE_KEY);\n\nconst klarnapayment = async () => {\n  (await stripe).createSource({\n    type: 'klarna',\n    amount: 816,\n    currency: 'eur',\n    klarna: {\n      product: 'payment',\n      purchase_country: 'DE'\n    },\n    source_order: {\n      items: [{\n        type: 'sku',\n        description: 'Grey cotton T-shirt',\n        quantity: 2,\n        currency: 'eur',\n        amount: 796\n      }, {\n        type: 'tax',\n        description: 'Taxes',\n        currency: 'eur',\n        amount: 20\n      }, {\n        type: 'shipping',\n        description: 'Free Shipping',\n        currency: 'eur',\n        amount: 0\n      }]\n    }\n  }).then(res => {\n    console.log(res);\n    console.log(res.source);\n    console.log(res.source.klarna.client_token);\n    return res.source;\n  });\n};\n\nconsole.log(klarnapayment().then(res => {\n  return res.klarna.client_token;\n}));\n\nwindow.klarnaAsyncCallback = async function () {\n  // Initialize the SDK\n  Klarna.Payments.init({\n    client_token: await klarnapayment().then(res => {\n      return res.klarna.client_token;\n    })\n  });\n  console.log(\"hej\"); // Load the widget for each payment method category:\n  // - pay_later\n  // - pay_over_time\n  // - pay_now\n\n  var available_categories = klarnapayment.klarna.payment_method_category.split(',');\n\n  for (var category of available_categories) {\n    Klarna.Payments.load({\n      container: \"#klarna_\" + category + \"_container\",\n      payment_method_category: category\n    }, function (res) {\n      if (res.show_form) {\n        /*\n        * this payment method category can be used, allow the customer\n        * to choose it in your interface.\n        */\n      } else {// this payment method category is not available\n        }\n    });\n  }\n};\n\nexport default class CheckOutView extends React.Component {\n  constructor(props) {\n    super();\n    this.props = props;\n  }\n\n  render() {\n    let totalPrice = 0;\n    console.log(klarnapayment()); //.then((res) =>{ \n    //console.log(res);\n    //console.log(klarnapayment(res));\n    //});\n    //totalPrice = this.props.model.getTotalBasketprice();\n    // comment toself: lägg in klarna här sedan\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Helmet, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"script\", {\n      type: \"text/javascript\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }\n    }, `\n\n\nconst klarnapayment = async () => {\n  (await stripe).createSource({\n  type: 'klarna',\n  amount: 816,\n  currency: 'eur',\n  klarna: {\n    product: 'payment',\n    purchase_country: 'DE',\n  },\n\n  source_order: {\n    items: [{\n      type: 'sku',\n      description: 'Grey cotton T-shirt',\n      quantity: 2,\n      currency: 'eur',\n      amount: 796,\n   }, {\n      type: 'tax',\n      description: 'Taxes',\n      currency: 'eur',\n      amount: 20,\n   }, {\n      type: 'shipping',\n      description: 'Free Shipping',\n      currency: 'eur',\n      amount: 0,\n   }]\n  }, \n  \n}).then((res)=>{\n  console.log(res);\n  console.log(res.source);\n  return res.source;\n})};\n\nconst klarnasource = async (resKlar) => {\n  debugger;\n  await window.fetch(resKlar, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n    },\n  }).then(function(response) {\n      return response.json();\n  });\n}\n\n\nconsole.log(klarnapayment());\n\n  window.klarnaAsyncCallback = async function () {\n\n  // Initialize the SDK\n  Klarna.Payments.init({\n    client_token: await klarnapayment.client_token\n  });\n  console.log(\"hej\")\n  // Load the widget for each payment method category:\n  // - pay_later\n  // - pay_over_time\n  // - pay_now\n  var available_categories = source.klarna.payment_method_category.split(',');\n  for (var category of available_categories) {\n    Klarna.Payments.load({\n      container: \"#klarna_\" + category + \"_container\",\n      payment_method_category: category,\n    }, function(res) {\n      if (res.show_form) {\n        /*\n        * this payment method category can be used, allow the customer\n        * to choose it in your interface.\n        */\n      } else {\n        // this payment method category is not available\n      }\n    });\n  }\n};\n\n\n`), /*#__PURE__*/React.createElement(\"script\", {\n      src: \"https://x.klarnacdn.net/kp/lib/v1/api.js\",\n      async: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 5\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pageTopDivider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      style: {\n        \"margin-right\": \"0px\",\n        \"margin-left\": \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-xl-6\",\n      style: {\n        \"padding-right\": \"0px\",\n        \"padding-left\": \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"text-align\": \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BasketDetails, {\n      model: this.props.model,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-xl-6\",\n      style: {\n        \"padding-right\": \"0px\",\n        \"padding-left\": \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Elements, {\n      stripe: stripePromise,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(KlarnaButton, {\n      id: \"pay-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 19\n      }\n    }, \"Pay using Klarna\"), /*#__PURE__*/React.createElement(CheckoutForm, {\n      price: totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 19\n      }\n    }))))));\n  }\n\n}\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}","map":{"version":3,"sources":["/Users/simonsundin/Documents/GitHub/projekt_gr-n/app/src/site_pages/checkOut.js"],"names":["React","CheckoutForm","BasketDetails","Elements","loadStripe","history","KlarnaButton","Helmet","Klarna","stripePromise","process","env","REACT_APP_PUBLISHABLE_KEY","stripe","klarnapayment","createSource","type","amount","currency","klarna","product","purchase_country","source_order","items","description","quantity","then","res","console","log","source","client_token","window","klarnaAsyncCallback","Payments","init","available_categories","payment_method_category","split","category","load","container","show_form","CheckOutView","Component","constructor","props","render","totalPrice","model","sleep","milliseconds","date","Date","now","currentDate"],"mappings":"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","sourcesContent":["import '../butterclient';\nimport React from 'react'\nimport CheckoutForm from '../ordering_components/CheckoutForm.jsx'\nimport BasketDetails from '../ordering_components/BasketDetails.js'\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport history from '../history';\nimport KlarnaButton from \"../ordering_components/prebuilt/KlarnaButton.jsx\";\nimport {Helmet} from \"react-helmet\";\nimport Klarna from \"klarna-checkout\"\n\n//************************TO DO ___ LATER ****************************/\n// Learning\n// To best leverage Stripe’s advanced fraud functionality,\n// include this script on every page, not just the checkout page.\n// This allows Stripe to detect anomalous behavior that may be indicative\n// of fraud as customers browse your website.\n// Note: This is why we are adding it to a Layout component.\n\n\nconst stripePromise = loadStripe(process.env.REACT_APP_PUBLISHABLE_KEY);\nconst stripe = loadStripe(process.env.REACT_APP_PUBLISHABLE_KEY);\n\n\nconst klarnapayment = async () => {\n  (await stripe).createSource({\n  type: 'klarna',\n  amount: 816,\n  currency: 'eur',\n  klarna: {\n    product: 'payment',\n    purchase_country: 'DE',\n  },\n\n  source_order: {\n    items: [{\n      type: 'sku',\n      description: 'Grey cotton T-shirt',\n      quantity: 2,\n      currency: 'eur',\n      amount: 796,\n   }, {\n      type: 'tax',\n      description: 'Taxes',\n      currency: 'eur',\n      amount: 20,\n   }, {\n      type: 'shipping',\n      description: 'Free Shipping',\n      currency: 'eur',\n      amount: 0,\n   }]\n  }, \n  \n}).then((res)=>{\n  console.log(res);\n  console.log(res.source);\n  console.log(res.source.klarna.client_token)\n  return res.source;\n})};\n\nconsole.log(klarnapayment().then((res) => {return res.klarna.client_token}))\nwindow.klarnaAsyncCallback = async function () {\n\n  // Initialize the SDK\n  Klarna.Payments.init({\n    client_token: await klarnapayment().then((res) => {return res.klarna.client_token})\n  });\n  console.log(\"hej\")\n  // Load the widget for each payment method category:\n  // - pay_later\n  // - pay_over_time\n  // - pay_now\n  var available_categories = klarnapayment.klarna.payment_method_category.split(',');\n  for (var category of available_categories) {\n    Klarna.Payments.load({\n      container: \"#klarna_\" + category + \"_container\",\n      payment_method_category: category,\n    }, function(res) {\n      if (res.show_form) {\n        /*\n        * this payment method category can be used, allow the customer\n        * to choose it in your interface.\n        */\n      } else {\n        // this payment method category is not available\n      }\n    });\n  }\n};\n\n\n\n\n\n\n\n\nexport default class CheckOutView extends React.Component {\n  constructor(props){\n    super();\n    this.props = props;\n    }\n\n\n\n    \n    \n\n   \n  render() {\n    let totalPrice = 0;\n    console.log(klarnapayment());\n\n    //.then((res) =>{ \n      //console.log(res);\n      //console.log(klarnapayment(res));\n    //});\n    //totalPrice = this.props.model.getTotalBasketprice();\n    \n\n    // comment toself: lägg in klarna här sedan\n    return <>\n    <Helmet>   \n    <script type=\"text/javascript\">{ `\n\n\nconst klarnapayment = async () => {\n  (await stripe).createSource({\n  type: 'klarna',\n  amount: 816,\n  currency: 'eur',\n  klarna: {\n    product: 'payment',\n    purchase_country: 'DE',\n  },\n\n  source_order: {\n    items: [{\n      type: 'sku',\n      description: 'Grey cotton T-shirt',\n      quantity: 2,\n      currency: 'eur',\n      amount: 796,\n   }, {\n      type: 'tax',\n      description: 'Taxes',\n      currency: 'eur',\n      amount: 20,\n   }, {\n      type: 'shipping',\n      description: 'Free Shipping',\n      currency: 'eur',\n      amount: 0,\n   }]\n  }, \n  \n}).then((res)=>{\n  console.log(res);\n  console.log(res.source);\n  return res.source;\n})};\n\nconst klarnasource = async (resKlar) => {\n  debugger;\n  await window.fetch(resKlar, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n    },\n  }).then(function(response) {\n      return response.json();\n  });\n}\n\n\nconsole.log(klarnapayment());\n\n  window.klarnaAsyncCallback = async function () {\n\n  // Initialize the SDK\n  Klarna.Payments.init({\n    client_token: await klarnapayment.client_token\n  });\n  console.log(\"hej\")\n  // Load the widget for each payment method category:\n  // - pay_later\n  // - pay_over_time\n  // - pay_now\n  var available_categories = source.klarna.payment_method_category.split(',');\n  for (var category of available_categories) {\n    Klarna.Payments.load({\n      container: \"#klarna_\" + category + \"_container\",\n      payment_method_category: category,\n    }, function(res) {\n      if (res.show_form) {\n        /*\n        * this payment method category can be used, allow the customer\n        * to choose it in your interface.\n        */\n      } else {\n        // this payment method category is not available\n      }\n    });\n  }\n};\n\n\n`}</script>\n    <script src=\"https://x.klarnacdn.net/kp/lib/v1/api.js\" async></script>\n    </Helmet>\n\n        <div>\n          <div className=\"pageTopDivider\"></div>\n            <div class=\"row\" style={{\"margin-right\": \"0px\", \"margin-left\":\"0px\"}}>\n              <div class=\"col-xl-6\" style={{\"padding-right\": \"0px\", \"padding-left\":\"0px\"}}>  \n                <div style={{\"text-align\": \"center\"}}>       \n                  <BasketDetails model={this.props.model} />\n                </div> \n              </div>\n              <div class=\"col-xl-6\" style={{\"padding-right\": \"0px\", \"padding-left\":\"0px\"}}>\n              <Elements stripe={stripePromise}>\n                  <KlarnaButton id={\"pay-button\"}> \n                    Pay using Klarna \n                  </KlarnaButton>\n                  \n                  <CheckoutForm price={ totalPrice}/> \n                  \n                </Elements>\n                </div>\n              </div>\n        </div>\n    </>\n  }\n}\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}"]},"metadata":{},"sourceType":"module"}