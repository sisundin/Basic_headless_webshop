{"ast":null,"code":"import React from \"react\";\n\nclass StoreModel extends React.Component {\n  constructor(props) {\n    super();\n    this.subscribers = [];\n    this.state = {\n      basket: props.basket\n    };\n  }\n\n  addObserver(callback) {\n    this.subscribers.push(callback);\n  }\n\n  removeObserver(callback) {\n    callback = this.subscribers.filter(o => o !== callback);\n  }\n\n  notifyObservers(whatHappened) {\n    this.subscribers.forEach(function (callback) {\n      callback(whatHappened);\n    });\n  }\n\n  addToBasket(prod, size = \"n/a\", amount = 1) {\n    let productthatexisted = this.state.basket.filter(produc => deepEqual(produc.prod, prod) && produc.sizeselected === size);\n    let bask = this.state.basket.filter(produc => !(deepEqual(produc.prod, prod) && produc.sizeselected === size));\n    let productObject = {\n      prod,\n      sizeselected: size,\n      amountorderd: amount\n    };\n\n    if (productthatexisted.length !== 0) {\n      let combinedamount = amount + productthatexisted[0].amountorderd;\n      productObject = {\n        prod,\n        sizeselected: size,\n        amountorderd: combinedamount\n      };\n    }\n\n    this.state.basket = [...bask, productObject];\n    localStorage.setItem(\"The_coolest_store\", JSON.stringify({\n      basket: [...this.state.basket]\n    }));\n    this.notifyObservers({\n      added: productObject\n    });\n  }\n\n  removeFromBasket(prod, size) {\n    let bask = this.state.basket.filter(produc => !(deepEqual(produc.prod, prod) && produc.sizeselected === size));\n    this.state.basket = [...bask];\n    localStorage.setItem(\"The_coolest_store\", JSON.stringify({\n      basket: [...this.state.basket]\n    }));\n    this.notifyObservers({\n      removed: prod\n    });\n  }\n\n  addQuantatieOfProduct(prod, size, change) {\n    let productthatexisted = this.state.basket.filter(produc => deepEqual(produc.prod, prod) && produc.sizeselected === size);\n    let bask = this.state.basket.filter(produc => !(deepEqual(produc.prod, prod) && produc.sizeselected === size));\n    let productObject = {\n      prod,\n      sizeselected: size,\n      amountorderd: 1\n    };\n    let combinedamount = 1;\n\n    if (productthatexisted.length !== 0) {\n      combinedamount = productthatexisted[0].amountorderd + change;\n\n      if (combinedamount <= 1) {\n        combinedamount = 1;\n      }\n\n      productObject = {\n        prod,\n        sizeselected: size,\n        amountorderd: combinedamount\n      };\n    }\n\n    this.state.basket = [...bask, productObject];\n    localStorage.setItem(\"The_coolest_store\", JSON.stringify({\n      basket: [...this.state.basket]\n    }));\n    this.notifyObservers({\n      changed: prod\n    });\n  }\n\n  clearBasket() {\n    this.state.basket = [];\n    console.log(this.state);\n    localStorage.setItem(\"The_coolest_store\", JSON.stringify({\n      basket: []\n    }));\n  }\n\n  getTotalBasketprice() {\n    console.log(this.state.basket);\n    let price = this.state.basket((a, product) => a += product.prod.product_price * product.amountorderd, 0);\n    return Math.round((price + Number.EPSILON) * 100) / 100;\n  }\n\n  isItemInBasket(prod, size) {\n    let productthatexisted = this.state.basket.filter(produc => deepEqual(produc.prod, prod) && produc.sizeselected === size);\n\n    if (productthatexisted.length !== 0) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  async getPageInformation(link) {\n    const butter = Butter('2fa7babaa7064c23b2cb90171957b2add0333e77');\n    await butter.page.retrieve('*', '' + link + '').then(resp => this.setData(resp)).catch(err => this.setState(this.setError({\n      error: err\n    })));\n  }\n\n  async getBasket() {\n    let sortedBask = [...this.state.basket].sort((a, b) => {\n      if (a.prod.product_name > b.prod.product_name) {\n        return +1;\n      }\n\n      if (a.prod.product_name < b.prod.product_name) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    return sortedBask;\n  }\n\n  getBasketItemNumber() {\n    return this.state.basket.length;\n  }\n\n}\n\nconst modelString = localStorage.getItem(\"The_coolest_store\");\nlet modelObject = JSON.parse(modelString);\nmodelObject ? console.log(\"User data detected\") : modelObject = {\n  basket: []\n};\nconst storeModel = new StoreModel(modelObject);\nexport default storeModel;\n\nfunction deepEqual(object1, object2) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n    const areObjects = isObject(val1) && isObject(val2);\n\n    if (areObjects && !deepEqual(val1, val2) || !areObjects && val1 !== val2) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isObject(object) {\n  return object != null && typeof object === 'object';\n}","map":{"version":3,"sources":["/Users/simonsundin/Documents/GitHub/projekt_gr-n/app/src/model_more/model.js"],"names":["React","StoreModel","Component","constructor","props","subscribers","state","basket","addObserver","callback","push","removeObserver","filter","o","notifyObservers","whatHappened","forEach","addToBasket","prod","size","amount","productthatexisted","produc","deepEqual","sizeselected","bask","productObject","amountorderd","length","combinedamount","localStorage","setItem","JSON","stringify","added","removeFromBasket","removed","addQuantatieOfProduct","change","changed","clearBasket","console","log","getTotalBasketprice","price","a","product","product_price","Math","round","Number","EPSILON","isItemInBasket","getPageInformation","link","butter","Butter","page","retrieve","then","resp","setData","catch","err","setState","setError","error","getBasket","sortedBask","sort","b","product_name","getBasketItemNumber","modelString","getItem","modelObject","parse","storeModel","object1","object2","keys1","Object","keys","keys2","key","val1","val2","areObjects","isObject","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n\nclass StoreModel extends React.Component {\n  constructor(props) {\n    super();\n    this.subscribers = [];\n    this.state = {\n      basket: props.basket\n    };\n  }\n\n  \n\n  addObserver(callback) {\n    this.subscribers.push(callback);\n  }\n\n  removeObserver(callback) {\n    callback = this.subscribers.filter((o) => o !== callback);\n  }\n\n  notifyObservers(whatHappened) {\n    this.subscribers.forEach(function (callback) {\n      callback(whatHappened);\n    });\n  }\n\n  addToBasket(prod, size=\"n/a\", amount=1){\n    let productthatexisted = this.state.basket.filter(produc => deepEqual(produc.prod, prod) && (produc.sizeselected === size));\n    let bask = this.state.basket.filter(produc => !(deepEqual(produc.prod, prod) && (produc.sizeselected === size)));\n    let productObject = {prod , sizeselected:size, amountorderd:amount }\n    if (productthatexisted.length !== 0){\n      let combinedamount = amount + productthatexisted[0].amountorderd \n      productObject = {prod , sizeselected:size, amountorderd:combinedamount}\n    }\n    this.state.basket = [...bask, productObject];\n    localStorage.setItem(\"The_coolest_store\", \n        JSON.stringify( {basket:[...this.state.basket]}))\n        this.notifyObservers({added:productObject});\n  }\n\n  removeFromBasket(prod,size){\n    let bask = this.state.basket.filter(produc => !(deepEqual(produc.prod, prod) && (produc.sizeselected === size)));\n    this.state.basket = [...bask];\n    localStorage.setItem(\"The_coolest_store\", \n        JSON.stringify( {basket:[...this.state.basket]}))\n        this.notifyObservers({removed:prod});\n  }\n\n  addQuantatieOfProduct(prod, size, change){\n    let productthatexisted = this.state.basket.filter(produc => deepEqual(produc.prod, prod) && (produc.sizeselected === size));\n    let bask = this.state.basket.filter(produc => !(deepEqual(produc.prod, prod) && (produc.sizeselected === size)));\n    let productObject = {prod , sizeselected:size, amountorderd:1 }\n    let combinedamount = 1\n    if (productthatexisted.length !== 0){\n        combinedamount = productthatexisted[0].amountorderd + change;\n      if((combinedamount) <= 1 ){\n        combinedamount = 1;\n      }\n      productObject = {prod , sizeselected:size, amountorderd:combinedamount}\n    }\n    this.state.basket = [...bask, productObject];\n    localStorage.setItem(\"The_coolest_store\", \n        JSON.stringify( {basket:[...this.state.basket]}))\n\n        this.notifyObservers({changed:prod});\n  }\n  \n\n   clearBasket(){\n    this.state.basket = [];\n    console.log(this.state);\n    \n    localStorage.setItem(\"The_coolest_store\", JSON.stringify({basket:[]}))\n  \n  }\n\n  getTotalBasketprice(){\n    console.log(this.state.basket)\n    let price = this.state.basket((a, product) => a += (product.prod.product_price * product.amountorderd) ,0)\n    \n    return Math.round((price + Number.EPSILON) * 100) / 100\n\n  }\n\n  isItemInBasket(prod, size){\n    let productthatexisted = this.state.basket.filter(produc => deepEqual(produc.prod, prod) && (produc.sizeselected === size));\n    if(productthatexisted.length !== 0){\n      return false\n    }\n    else{return true}\n  \n  }\n\n  async getPageInformation(link) {\n    const butter = Butter('2fa7babaa7064c23b2cb90171957b2add0333e77');\n    await butter.page.retrieve('*', ''+link +'').then(resp => this.setData(resp)).catch(err=>this.setState(this.setError({error:err})));\n \n    }\n\n  async getBasket(){\n   \n    let sortedBask = [...this.state.basket].sort((a,b) => {\n        if(a.prod.product_name > b.prod.product_name){\n            return +1\n          }\n        if(a.prod.product_name < b.prod.product_name){\n            return -1\n          }\n        else{\n            return 0\n          }\n        }) \n    \n    return sortedBask;\n  }\n\n  getBasketItemNumber(){\n    \n    return this.state.basket.length;\n  }\n}\n\nconst modelString= localStorage.getItem(\"The_coolest_store\");\nlet modelObject= JSON.parse(modelString);\nmodelObject?console.log(\"User data detected\"): modelObject= {basket:[]}\nconst storeModel = new StoreModel(modelObject);\nexport default storeModel;\n\nfunction deepEqual(object1, object2) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n    const areObjects = isObject(val1) && isObject(val2);\n    if (\n      areObjects && !deepEqual(val1, val2) ||\n      !areObjects && val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isObject(object) {\n  return object != null && typeof object === 'object';\n}\n"]},"metadata":{},"sourceType":"module"}