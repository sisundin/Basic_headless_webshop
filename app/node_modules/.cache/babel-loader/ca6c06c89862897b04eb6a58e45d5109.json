{"ast":null,"code":"var _jsxFileName = \"/Users/simonsundin/Documents/GitHub/projekt_gr-n/app/src/ordering_components/KlarnaCheckout.jsx\";\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport KlarnaButton from \"./prebuilt/KlarnaButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nconst Klarna = Klarna.Payments.init({\n  client_token: source.klarna.client_token\n});\nexport default function KlarnaCheckout() {\n  window.klarnaAsyncCallback = function () {\n    // Initialize the SDK\n    // Load the widget for each payment method category:\n    // - pay_later\n    // - pay_over_time\n    // - pay_now\n    var available_categories = source.klarna.payment_method_category.split(',');\n\n    for (var category of available_categories) {\n      Klarna.Payments.load({\n        container: \"#klarna_\" + category + \"_container\",\n        payment_method_category: category\n      }, function (res) {\n        if (res.show_form) {\n          /*\n          * this payment method category can be used, allow the customer\n          * to choose it in your interface.\n          */\n        } else {// this payment method category is not available\n          }\n      });\n    }\n  };\n\n  const handleClick = () => {\n    // get the category the customer chose(using your own code)\n    var selectedCategory = getSelectedCategory(); // Submit the payment for authorization with the selected category\n\n    Klarna.Payments.authorize({\n      payment_method_category: selectedCategory\n    }, function (res) {\n      if (res.approved) {// Payment has been authorized\n      } else {\n        if (res.error) {// Payment not authorized or an error has occurred\n        } else {// handle other states\n          }\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(KlarnaButton, {\n    id: \"paybutton\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Pay\"));\n}\n;","map":{"version":3,"sources":["/Users/simonsundin/Documents/GitHub/projekt_gr-n/app/src/ordering_components/KlarnaCheckout.jsx"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","styled","Row","BillingDetailsFields","SubmitButton","KlarnaButton","CheckoutError","Klarna","Payments","init","client_token","source","klarna","KlarnaCheckout","window","klarnaAsyncCallback","available_categories","payment_method_category","split","category","load","container","res","show_form","handleClick","selectedCategory","getSelectedCategory","authorize","approved","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EAEEC,SAFF,QAEmB,OAFnB;AAGA,SACEC,WADF,EAEEC,SAFF,EAGEC,WAHF,QAGqB,yBAHrB;AAIA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA,OAAOC,aAAP,MAA0B,0BAA1B;AAEA,MAAMC,MAAM,GAAGA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqB;AAClCC,EAAAA,YAAY,EAAEC,MAAM,CAACC,MAAP,CAAcF;AADM,CAArB,CAAf;AAIA,eAAe,SAASG,cAAT,GAA0B;AAErCC,EAAAA,MAAM,CAACC,mBAAP,GAA6B,YAAY;AAErC;AAGA;AACA;AACA;AACA;AACA,QAAIC,oBAAoB,GAAGL,MAAM,CAACC,MAAP,CAAcK,uBAAd,CAAsCC,KAAtC,CAA4C,GAA5C,CAA3B;;AACA,SAAK,IAAIC,QAAT,IAAqBH,oBAArB,EAA2C;AACzCT,MAAAA,MAAM,CAACC,QAAP,CAAgBY,IAAhB,CAAqB;AACnBC,QAAAA,SAAS,EAAE,aAAaF,QAAb,GAAwB,YADhB;AAEnBF,QAAAA,uBAAuB,EAAEE;AAFN,OAArB,EAGG,UAASG,GAAT,EAAc;AACf,YAAIA,GAAG,CAACC,SAAR,EAAmB;AACjB;;;;AAID,SALD,MAKO,CACL;AACD;AACF,OAZD;AAaD;AACF,GAzBH;;AA4BA,QAAMC,WAAW,GAAG,MAAM;AACtB;AACA,QAAIC,gBAAgB,GAAGC,mBAAmB,EAA1C,CAFsB,CAGtB;;AACDnB,IAAAA,MAAM,CAACC,QAAP,CAAgBmB,SAAhB,CAA0B;AACvBV,MAAAA,uBAAuB,EAAEQ;AADF,KAA1B,EAEI,UAASH,GAAT,EAAc;AACf,UAAIA,GAAG,CAACM,QAAR,EAAkB,CAChB;AACD,OAFD,MAEO;AACL,YAAIN,GAAG,CAACO,KAAR,EAAe,CACb;AACD,SAFD,MAEO,CACL;AACD;AACF;AACF,KAZF;AAaA,GAjBH;;AAqBF,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,EAAE,EAAE,WAAlB;AAA+B,IAAA,OAAO,EAAEL,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADJ;AAOD;AAAA","sourcesContent":["import React from 'react';\nimport { \n  useState, \n  useEffect } from \"react\";\nimport { \n  CardElement, \n  useStripe, \n  useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport KlarnaButton from \"./prebuilt/KlarnaButton\";\n\nimport CheckoutError from \"./prebuilt/CheckoutError\";\n\nconst Klarna = Klarna.Payments.init({\n  client_token: source.klarna.client_token,\n});\n\nexport default function KlarnaCheckout() {\n\n    window.klarnaAsyncCallback = function () {\n\n        // Initialize the SDK\n        \n      \n        // Load the widget for each payment method category:\n        // - pay_later\n        // - pay_over_time\n        // - pay_now\n        var available_categories = source.klarna.payment_method_category.split(',');\n        for (var category of available_categories) {\n          Klarna.Payments.load({\n            container: \"#klarna_\" + category + \"_container\",\n            payment_method_category: category,\n          }, function(res) {\n            if (res.show_form) {\n              /*\n              * this payment method category can be used, allow the customer\n              * to choose it in your interface.\n              */\n            } else {\n              // this payment method category is not available\n            }\n          });\n        }\n      };\n\n\n    const handleClick = () => {\n        // get the category the customer chose(using your own code)\n        var selectedCategory = getSelectedCategory();\n        // Submit the payment for authorization with the selected category\n       Klarna.Payments.authorize({\n          payment_method_category: selectedCategory\n        }, function(res) {\n          if (res.approved) {\n            // Payment has been authorized\n          } else {\n            if (res.error) {\n              // Payment not authorized or an error has occurred\n            } else {\n              // handle other states\n            }\n          }\n        })\n      };\n\n    \n \n  return (\n      <div>\n        <KlarnaButton id={\"paybutton\"} onClick={handleClick}> \n            Pay \n        </KlarnaButton>\n      </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}