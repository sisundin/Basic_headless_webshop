{"ast":null,"code":"var _jsxFileName = \"/Users/simonsundin/Documents/GitHub/projekt_gr-n/app/src/ordering_components/KlarnaCheckout.jsx\";\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport KlarnaButton from \"./prebuilt/KlarnaButton\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nexport default function KlarnaCheckout() {\n  const stripe = useStripe();\n  useEffect(() => {\n    const source = () => {\n      stripe.createSource({\n        type: 'klarna',\n        amount: 816,\n        currency: 'eur',\n        klarna: {\n          product: 'payment',\n          purchase_country: 'DE'\n        },\n        source_order: {\n          items: [{\n            type: 'sku',\n            description: 'Grey cotton T-shirt',\n            quantity: 2,\n            currency: 'eur',\n            amount: 796\n          }, {\n            type: 'tax',\n            description: 'Taxes',\n            currency: 'eur',\n            amount: 20\n          }, {\n            type: 'shipping',\n            description: 'Free Shipping',\n            currency: 'eur',\n            amount: 0\n          }]\n        }\n      }).then(function (result) {\n        return result.source;\n      });\n    };\n  });\n  Klarna.Payments.init({\n    client_token: useEfect().source.klarna.client_token\n  });\n\n  window.klarnaAsyncCallback = function () {\n    // Initialize the SDK\n    // Load the widget for each payment method category:\n    // - pay_later\n    // - pay_over_time\n    // - pay_now\n    var available_categories = source.klarna.payment_method_category.split(',');\n\n    for (var category of available_categories) {\n      Klarna.Payments.load({\n        container: \"#klarna_\" + category + \"_container\",\n        payment_method_category: category\n      }, function (res) {\n        if (res.show_form) {\n          /*\n          * this payment method category can be used, allow the customer\n          * to choose it in your interface.\n          */\n        } else {// this payment method category is not available\n          }\n      });\n    }\n  };\n\n  const handleClick = () => {\n    // get the category the customer chose(using your own code)\n    //var selectedCategory = getSelectedCategory();\n    // Submit the payment for authorization with the selected category\n    console.log(Klarna.Payments);\n    Klarna.Payments.authorize({\n      payment_method_category: \"pay_now\"\n    }, function (res) {\n      if (res.approved) {// Payment has been authorized\n      } else {\n        if (res.error) {// Payment not authorized or an error has occurred\n        } else {// handle other states\n          }\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(KlarnaButton, {\n    id: \"paybutton\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Pay\"));\n}\n;","map":{"version":3,"sources":["/Users/simonsundin/Documents/GitHub/projekt_gr-n/app/src/ordering_components/KlarnaCheckout.jsx"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","styled","Row","BillingDetailsFields","SubmitButton","KlarnaButton","Elements","CheckoutError","KlarnaCheckout","stripe","source","createSource","type","amount","currency","klarna","product","purchase_country","source_order","items","description","quantity","then","result","Klarna","Payments","init","client_token","useEfect","window","klarnaAsyncCallback","available_categories","payment_method_category","split","category","load","container","res","show_form","handleClick","console","log","authorize","approved","error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { \n  useState, \n  useEffect } from \"react\";\nimport { \n  CardElement, \n  useStripe, \n  useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport KlarnaButton from \"./prebuilt/KlarnaButton\";\nimport { Elements } from \"@stripe/react-stripe-js\";\n\n\nimport CheckoutError from \"./prebuilt/CheckoutError\";\n\n\n\n\n\nexport default function KlarnaCheckout() {\n\n  \n  \n\n  const stripe = useStripe(); \n  useEffect(() => {\n    const source = () => {\n    \n    stripe.createSource({\n    type: 'klarna',\n    amount: 816,\n    currency: 'eur',\n    klarna: {\n      product: 'payment',\n      purchase_country: 'DE',\n    },\n  \n    source_order: {\n      items: [{\n        type: 'sku',\n        description: 'Grey cotton T-shirt',\n        quantity: 2,\n        currency: 'eur',\n        amount: 796,\n     }, {\n        type: 'tax',\n        description: 'Taxes',\n        currency: 'eur',\n        amount: 20,\n     }, {\n        type: 'shipping',\n        description: 'Free Shipping',\n        currency: 'eur',\n        amount: 0,\n     }],\n    },\n    }).then(function(result) {\n    return result.source\n    }); \n  };\n  \n\n\n\n  })\n  \n  Klarna.Payments.init({\n    client_token: useEfect().source.klarna.client_token,\n  });\n  \n\n\n\n    window.klarnaAsyncCallback = function () {\n\n        // Initialize the SDK\n\n      \n        // Load the widget for each payment method category:\n        // - pay_later\n        // - pay_over_time\n        // - pay_now\n        var available_categories = source.klarna.payment_method_category.split(',');\n        for (var category of available_categories) {\n          Klarna.Payments.load({\n            container: \"#klarna_\" + category + \"_container\",\n            payment_method_category: category,\n          }, function(res) {\n            if (res.show_form) {\n              /*\n              * this payment method category can be used, allow the customer\n              * to choose it in your interface.\n              */\n            } else {\n              // this payment method category is not available\n            }\n          });\n        }\n      };\n\n\n    const handleClick = () => {\n\n        // get the category the customer chose(using your own code)\n        //var selectedCategory = getSelectedCategory();\n        // Submit the payment for authorization with the selected category\n\n        console.log(Klarna.Payments)\n        Klarna.Payments.authorize({\n          payment_method_category: \"pay_now\"\n        }, function(res) {\n          if (res.approved) {\n            // Payment has been authorized\n          } else {\n            if (res.error) {\n              // Payment not authorized or an error has occurred\n            } else {\n              // handle other states\n            }\n          }\n        })\n      };\n\n    \n \n  return <div>\n    \n        <KlarnaButton id={\"paybutton\"} onClick={handleClick}> \n            Pay \n        </KlarnaButton>\n     \n      </div>\n\n};"]},"metadata":{},"sourceType":"module"}